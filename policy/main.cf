body file control
{
  namespace => "lynis";
}

bundle agent globals
{
  vars:
    default:linux::
      "version"
        string => ifelse(
                          isvariable( "def.lynis[globals][version]"),
                                      "$(def.lynis[globals][version])",
                          "3.0.7"); # "default:def.lynis" = {"globals": { "version": "3.0.6" } }

      #https://cisofy.com/downloads/lynis/
      "archive_hash"
        string => ifelse(
                          isvariable( "def.lynis[globals][archive_hash]"),
                          "$(def.lynis[globals][archive_hash])",
                          "52891674347a463ce0fbbf1225cdb61f83c5db412d1c101cb48aa5f88a29e77d");
      # Website SHA256 hash: f23dd57561f273a7e39e4597277571973dadbab6a131a4712340a6d0b36091f5
      # "default:def.lynis" = {"globals": { "version": "3.0.6", "archive_hash": "3005346e90339c18a4c626169c6f1d9fb8643bb0d0a049bcaf64b7ccb4fd272c" } }

      "hash_type"    string => "sha256";
      "tar_url"      string => "https://downloads.cisofy.com/lynis/lynis-$(version).tar.gz";

      "max_age" string => "1";

      "install_prefix" string => "/opt/lynis";
      "report_data" string => "/var/log/lynis-report.dat";

  classes:
      "lynis_supported_platform"
        scope => "namespace",
        meta => { "report" },
        expression => "!windows";
}

bundle agent main
{

  methods:

    default:linux::

      "globals";
      "report_freshness";
      "install_tar_gz";
      "audit";
      "inventory";

}
bundle agent report_freshness
{
  vars:

    default:linux::
      "max_age" string => "$(globals.max_age)";
      "data_file" string => "$(globals.report_data)";

  files:
      "$(data_file)"
        delete => default:tidy,
        file_select => default:days_old( $(max_age) );
}

bundle agent install_tar_gz
{
  vars:
    default:linux::
      # The github and website packages have different SHAs
      # Redirected download from github
      #"url[lynis]"     string => "https://github.com/CISOfy/lynis/archive/$(globals.version).tar.gz";
      # Direct download from downloads.cisofy.com
      #"url[lynis]"      string => "https://downloads.cisofy.com/lynis/lynis-$(version).tar.gz";
      "url[lynis]"     string => "$(globals.tar_url)";
      "lynis_archive"  string => "$(globals.install_prefix)/lynis-$(globals.version).tar.gz";
      "lynis"          string => "$(globals.install_prefix)/lynis-$(globals.version)/lynis";
      "prefix"         string => "$(globals.install_prefix)";
      "hash_type"      string => "$(globals.hash_type)";
      "archive_hash"   string => "$(globals.archive_hash)";
      "version"        string => "$(globals.version)";

  classes:
      "have_tar_file" expression => fileexists( $(lynis_archive) );

  files:
    default:linux::
      "$(prefix)/."
        comment => "The directory that we are installing to needs to exist or
                    downloads will fail.",
        create => "true";

      # We extract into a version specific directory for install
      "$(prefix)/lynis-$(version)/." create => "true";

  commands:

    default:linux::

      # Download $(lynis_archive) if it does not match the
      # $(globals.hash_type) digest of $(globals.archive_hash)

      "$(default:paths.curl)"
        handle => "fetch_lynis_archive_using_curl",
        arglist => {
                     "--silent",
                     "$(url[lynis])",
                     "-L",
                     #"--max-redirs",
                     #"3",
                     "--output",
                     "$(lynis_archive)",
                     #"-k"
                   },
        if => and( not(fileexists( $(lynis_archive) )),
                   "default:_stdlib_path_exists_curl");

      "$(default:paths.wget)"
        handle => "fetch_lynis_archive_using_wget",
        arglist => {
                     "--quiet",
                     "$(url[lynis])",
                     #"-L",
                     #"--max-redirs",
                     #"3",
                     "--output-document",
                     "$(lynis_archive)",
                     #"-k"
        },
        if => and( not(fileexists( $(lynis_archive) )),
                   "default:_stdlib_path_exists_wget");


      # Unpack $(lynis_archive) into $(globals.install_prefix) if
      # $(lynis_archive) matches the $(globals.hash_type) digest of
      # $(globals_archive_hash) AND
      # $(globals.install_prefix)/lynis-$(globals.version) does
      # not exist.

      have_tar_file::

      "$(default:paths.tar)"
        arglist => {
                     "-zxf",
                     "$(lynis_archive)",
                     "-C",
                     "$(prefix)/lynis-$(version)",
                     # The tarball from the website contains a directory called lynis, and that's got the content we want.
                     # Note, the tarball from github contains a directory named lynis-Major.Minor.Patch
                     "--strip-components=1"
                   },
        if => and(strcmp(
                          file_hash( $(lynis_archive), $(hash_type) ),
                          $(archive_hash)),
                  not( fileexists( "$(prefix)/lynis-$(version)/lynis") ) );

}

bundle agent audit
# @brief Run lynis from the unpacked tar file if $(globals.report_data) is
# not available.
{
  vars:

   default:linux::

      "report_data" string => "$(globals.report_data)";
      "lynis" string => "$(install_tar_gz.lynis)";
      "lynis_dir" string => dirname( $(lynis) );

  classes:
      "_report_missing"
        not => fileexists( $(report_data) );

  commands:

      # We re-generate the report any time it's not found, or when the class
      # lynis:want_report_generated_now is defined.
      #
      # For example: cf-agent -K --define lynis:want_report_generated_now

    lynis_supported_platform.(_report_missing|want_report_generated_now)::

      "$(lynis)"
        contain => default:in_dir_shell( "$(lynis_dir)" ),
        arglist => { "audit", "system", "--quiet", "--auditor", "'CFEngine cf-agent'" };
}

bundle agent inventory
# @brief Parse the JSON version of the lynis report data and inventory interesting data
{
  vars:

    default:linux::

      "prefix"           string => "$(globals.install_prefix)";
      "report_data_file" string => "$(globals.report_data)";


      # The lynis-report.dat file fomrat is line based. getting it into
      # digest able parts requires several promises.

      # Example lynis-report.dat snippet
      #  # Lynis Report
      #  lynis_version=2.7.4
      #  suggestion[]=BOOT-5122|Set a password on GRUB bootloader to prevent altering boot configuration (e.g. boot in single user mode without password)|-|-|
      #  suggestion[]=FILE-6354|Check 5 files in /tmp which are older than 90 days|-|-|

      # For more complex entries like suggestion, details, and warning entries,
      # = Is the primary Key, value separator, followed by |. Since there can be
      # multiple lines with the same key, we need to index based on the line
      # number.

      "d"
        data => data_readstringarrayidx( $(report_data_file),
                                         "",
                                         "=",
                                         inf,
                                         inf),
        if => fileexists( $(report_data_file) );
      "i" slist => getindices( d );

      # The simpler key=value fields that can not have duplicate keys should be indexed by key instead of line number
      "kv"
        data => data_readstringarray( $(report_data_file),
                                      "",
                                      "=",
                                      inf,
                                      inf),
        if => fileexists( $(report_data_file) );

      "v"
        string => "$(kv[lynis_version])",
        meta => { "inventory", "attribute_name=CISOfy Lynis Version" },
        if => isvariable( "kv[lynis_version]" );


      # Generate a datastructure to contain suggestsions.
      # We extract the Suggestion ID to use as the key, and extract
      # the description to use as the value.
      # In order to not lose information when there are multiple suggestions with the same ID
      # we use the index position from the original structure to make unqiue entries for each comment
      "suggestion[$(with)]"
        string => nth( string_split( "$(d[$(i)][1])", "\|", 3 ), 1 ),
        if => strcmp( "suggestion[]", "$(d[$(i)][0])"),
        meta => { "inventory", "attribute_name=CISOfy Lynis Suggestions", "lynis-control-id=$(with)" },
        with => nth( string_split( "$(d[$(i)][1])", "\|", 3 ), 0 );
      "si" slist => getindices( suggestion );

      "warning[$(with)]"
        string => nth( string_split( "$(d[$(i)][1])", "\|", 3 ), 1 ),
        if => strcmp( "warning[]", "$(d[$(i)][0])"),
        meta => { "inventory", "attribute_name=CISOfy Lynis Warnings", "lynis-control-id=$(with)" },
        with => nth( string_split( "$(d[$(i)][1])", "\|", 3 ), 0 );
      "wi" slist => getindices( suggestion );

        # This is nasty. Very difficult to read, but it works.
        # Parse details[]=KRNL-6000|sysctl|desc:Log all packages for which the host does not have a path back to the source;field:net.ipv4.conf.default.log_martians;prefval:1;value:0;|
        # into details[KRNL-6000]=net.ipv4.conf.default.log_martians value is '0' prefer '1'

        "details[$(with)]"
          string => concat( nth( string_split( nth( string_split( nth( string_split( "$(d[$(i)][1])", "\|", 3 ), 2 ), ";", 3 ), 1), ":", 2), 1),
                            " value is '",
                            string_replace( nth( string_split( nth( string_split( nth( string_split( "$(d[$(i)][1])", "\|", 3 ), 2 ), ";", 4 ), 3), ":", 4), 1), ";|", ""),
                            "' prefer '",
                            nth( string_split( nth( string_split( nth( string_split( "$(d[$(i)][1])", "\|", 3 ), 2 ), ";", 4 ), 2), ":", 2), 1),
                            "'"),
          if => strcmp( "details[]", "$(d[$(i)][0])"),
          meta => { "inventory", concat( "attribute_name=CISOfy Lynis Suggestion ", nth( string_split( "$(with)", " ", 2), 0), " details" ), "lynis-control-id=$(with)" },
          with => concat( nth( string_split( "$(d[$(i)][1])", "\|", 3 ), 0 ), " ", nth( string_split( nth( string_split( nth( string_split( "$(d[$(i)][1])", "\|", 3 ), 2 ), ";", 3 ), 1), ":", 2), 1) );

      "di"
        slist => getindices( "details" );

      # We combine suggestions and warning in this consolidated list so that we
      # can get then extract the unique elements. REF: CFE-3911
      "_finding_ids" -> { "CFE-3911" }
        slist => { @(si), @(wi) };

      "finding_ids"
        slist => unique( @(_finding_ids) ),
        meta => { "inventory", "attribute_name=CISOfy Lynis Control ID findings" },
        comment => "A list of the Lynis Control IDs surfaced as warnings or suggestions";

      "count_findings"
        int => length( finding_ids ),
        meta => { "inventory", "attribute_name=CISOfy Lynis finding count" };

      # Inventory report scan completion datetime
      "report_datetime_end"
        string => "$(kv[report_datetime_end])",
        meta => { "inventory", "attribute_name=CISOfy Lynis datetime scan completed"},
        if => isvariable( "kv[report_datetime_end]" );

      # Inventory report scan completion date
      "report_date_end"
        string => nth( string_split("$(kv[report_datetime_end])", "\s+", inf ), 0 ),
        meta => { "inventory", "attribute_name=CISOfy Lynis date scan completed"},
        if => isvariable( "kv[report_datetime_end]" );

      # Inventory report scan completion date
      "report_date_days_since"
        string => format( "%d", eval( '(($(sys.systime) - $(with))/(3600*24))', math, infix )),
        meta => { "inventory", "attribute_name=CISOfy Lynis days since scan completed"},
        if => isvariable( "kv[report_datetime_end]" ),
        with => execresult( "date +%s --date '$(kv[report_datetime_end])'", useshell);

      # Inventory Lynis Security Hardening index
      "hardening_index"
        int => "$(kv[hardening_index])",
        meta => { "inventory", "attribute_name=CISOfy Lynis Hardening Index"},
        if => isvariable( "kv[hardening_index]" );

      "lynis_update_available"
        string => ifelse( strcmp( "$(kv[lynis_update_available])", "-1"), "No",
                          strcmp( "$(kv[lynis_update_available])", "0"), "Yes",
                          "Unknown" ),
        meta => { "inventory", "attribute_name=CISOfy Lynis Update Available"};

 reports:

    default:inform_mode.!default:linux::
      "NOTICE: This platform is not currently supported by $(this.namespace):$(this.bundle) in $(this.promise_filename)";

    default:verbose_mode.default:linux::
     # Report suggestion details
      "CISOfy Lynis Version: $(v)";
      "Last scan completed: $(report_datetime_end)";
      "Hardening index: $(hardening_index) (higher is better)";

      "----- Control IDs with findings (suggestion, warning) ------";
      "$(finding_ids)";
      "----- Warnings -----";
      "$(wi) -- $(warning[$(wi)])";

      "----- Suggestions -----";
      "$(si) -- $(suggestion[$(si)])";

      "----- Details -----";
      "$(di) -- $(details[$(di)])";


}
